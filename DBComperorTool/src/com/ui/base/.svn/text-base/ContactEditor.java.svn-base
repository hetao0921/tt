/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.ui.base;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import com.db.base.JDBCExec;
import com.serlize.pojo.StatusSerlize;
import com.ui.listener.CompareListener;
import com.ui.listener.ConnectionListener;
import com.ui.listener.DatatableListener;
import com.ui.listener.OpenListener;
import com.ui.listener.SaveAsListener;
import com.ui.listener.SaveListener;
import com.ui.listener.TestListener;

public class ContactEditor extends javax.swing.JFrame {

	static {
		PropertyConfigurator.configure("conf/log4j.properties");
		System.setProperty("file.encoding", "UTF-8");
		// new ReadXml().read();
		System.setProperty("java.awt.headless", "true");
	}

	int screenWidth = ((int) java.awt.Toolkit.getDefaultToolkit()
			.getScreenSize().width);
	int screenHeight = ((int) java.awt.Toolkit.getDefaultToolkit()
			.getScreenSize().height);
	private static final Logger logger = Logger.getLogger(ContactEditor.class);
	DefaultListModel model = new DefaultListModel();
	DefaultListModel defaultModel = null;
	List<String> columnsName = null;

	/**
	 * Creates new form ContactEditor
	 */
	public ContactEditor() {
		//initGlobalFont();
		initComponents();
	}

	Connection conn1;
	Connection conn2;

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jLabel8 = new javax.swing.JLabel();
		port1 = new javax.swing.JTextField();
		jLabel10 = new javax.swing.JLabel();
		jLabel11 = new javax.swing.JLabel();
		hostname1 = new javax.swing.JTextField();
		jLabel13 = new javax.swing.JLabel();
		username1 = new javax.swing.JTextField();
		jLabel15 = new javax.swing.JLabel();
		password1 = new javax.swing.JTextField();
		test1 = new javax.swing.JButton();
		connection1 = new javax.swing.JButton();
		cancelconnection1 = new javax.swing.JButton();
		filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
				new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
		jPanel6 = new javax.swing.JPanel();
		jLabel9 = new javax.swing.JLabel();
		port2 = new javax.swing.JTextField();
		jLabel12 = new javax.swing.JLabel();
		jLabel14 = new javax.swing.JLabel();
		hostname2 = new javax.swing.JTextField();
		jLabel16 = new javax.swing.JLabel();
		username2 = new javax.swing.JTextField();
		jLabel36 = new javax.swing.JLabel();
		password2 = new javax.swing.JTextField();
		test2 = new javax.swing.JButton();
		connection2 = new javax.swing.JButton();
		cancelconnection2 = new javax.swing.JButton();
		filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
				new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
		jPanel3 = new javax.swing.JPanel();
		jPanel7 = new javax.swing.JPanel();
		filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
				new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
		database = new javax.swing.JTextField();
		jLabel17 = new javax.swing.JLabel();
		jLabel18 = new javax.swing.JLabel();
		compare = new javax.swing.JButton();
		cancelcompare = new javax.swing.JButton();
		datatable = new java.awt.Choice();
		jPanel8 = new javax.swing.JPanel();
		filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
				new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
		jScrollPane1 = new javax.swing.JScrollPane();
		result = new javax.swing.JTextArea();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		jMenu2 = new javax.swing.JMenu();
		port1.setText("3306");
		port2.setText("3306");

		left = new javax.swing.JButton();
		right = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		jList1 = new javax.swing.JList();
		jScrollPane3 = new javax.swing.JScrollPane();
		jList2 = new javax.swing.JList();

		jPanel9 = new javax.swing.JPanel();
		filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
				new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("数据库比较工具V1");

		jPanel1.setBorder(javax.swing.BorderFactory
				.createTitledBorder("数据库一的信息"));
		jPanel1.setToolTipText("数据库比较工具V1");

		jLabel8.setText("端口:");

		jLabel10.setText("数据库一");

		jLabel11.setText("主机名或IP地址:");

		jLabel13.setText("用户名:");

		jLabel15.setText("密码:");

		test1.setText("测试");

		String hostname1Str = hostname1.getText();
		// test1.addActionListener(new
		// TestListener(hostname1Str,port1.getText().trim(),username1.getText().trim(),password1.getText().trim())
		// {
		//
		// });

		test1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
//				TestListener testListener = new TestListener(hostname1
//						.getText(), port1.getText().trim(), username1.getText()
//						.trim(), password1.getText().trim());
//				int result = testListener.TestDB();
				
				ConnectionListener connectionListener = new ConnectionListener(
						hostname1.getText(), port1.getText().trim(), username1
								.getText().trim(), password1.getText().trim());
				conn1 = connectionListener.getConnection();

//				logger.info("the test connection result is :" + result);
				if (null == conn1) {
					JOptionPane.showMessageDialog(null, "连接失败", "提示",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					JOptionPane.showMessageDialog(null, "连接成功", "提示",
							JOptionPane.INFORMATION_MESSAGE);
				}

			}
		});

		connection1.setText("连接");
		connection1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				logger.info("获取数据库一的连接");
				ConnectionListener connectionListener = new ConnectionListener(
						hostname1.getText(), port1.getText().trim(), username1
								.getText().trim(), password1.getText().trim());
				conn1 = connectionListener.getConnection();
				if (null == conn1) {
					JOptionPane.showMessageDialog(null, "获取数据库连接失败", "提示",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					JOptionPane.showMessageDialog(null, "获取数据库连接成功", "提示",
							JOptionPane.INFORMATION_MESSAGE);
				}
			}
		});

		cancelconnection1.setText("取消");
		cancelconnection1
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						logger.info("清空数据库一的配置");
						hostname1.setText("");
						port1.setText("3306");
						username1.setText("");
						password1.setText("");
					}
				});

		org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(jPanel1Layout
								.createSequentialGroup()
								.addContainerGap(
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.add(jPanel1Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jPanel1Layout
												.createSequentialGroup()
												.add(jPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(jLabel15)
														.add(jLabel13))
												.add(52, 52, 52)
												.add(jPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(username1,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																203,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(jPanel1Layout
																.createParallelGroup(
																		org.jdesktop.layout.GroupLayout.TRAILING)
																.add(jPanel1Layout
																		.createSequentialGroup()
																		.add(test1)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.UNRELATED)
																		.add(connection1)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(cancelconnection1))
																.add(password1,
																		org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																		203,
																		org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
										.add(jPanel1Layout
												.createSequentialGroup()
												.add(jLabel8)
												.add(64, 64, 64)
												.add(port1,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														203,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.add(jLabel10)
										.add(jPanel1Layout
												.createSequentialGroup()
												.add(jLabel11)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(hostname1,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														203,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(filler1,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(jPanel1Layout
								.createSequentialGroup()
								.add(jPanel1Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jPanel1Layout
												.createSequentialGroup()
												.add(jLabel10)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(jPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(jLabel11)
														.add(hostname1,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
												.add(4, 4, 4))
										.add(org.jdesktop.layout.GroupLayout.TRAILING,
												jPanel1Layout
														.createSequentialGroup()
														.add(filler1,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(
																org.jdesktop.layout.LayoutStyle.UNRELATED)))
								.add(jPanel1Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(jLabel8)
										.add(port1,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(jPanel1Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(jLabel13)
										.add(username1,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(jPanel1Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(jLabel15)
										.add(password1,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(jPanel1Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(test1).add(connection1)
										.add(cancelconnection1))
								.addContainerGap()));

		jPanel6.setBorder(javax.swing.BorderFactory
				.createTitledBorder("数据库二的信息"));
		jPanel6.setToolTipText("数据库比较工具V1");

		jLabel9.setText("端口:");

		jLabel12.setText("数据库二");

		jLabel14.setText("主机名或IP地址:");

		jLabel16.setText("用户名:");

		jLabel36.setText("密码:");

		test2.setText("测试");
		test2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
//				TestListener testListener = new TestListener(hostname2
//						.getText(), port2.getText().trim(), username2.getText()
//						.trim(), password2.getText().trim());
//				int result = testListener.TestDB();
				ConnectionListener connectionListener = new ConnectionListener(
						hostname2.getText(), port2.getText().trim(), username2
								.getText().trim(), password2.getText().trim());
				conn2 = connectionListener.getConnection();


				logger.info("the test connection result is :" + result);
				if (null == conn2) {
					JOptionPane.showMessageDialog(null, "连接失败", "提示",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					JOptionPane.showMessageDialog(null, "连接成功", "提示",
							JOptionPane.INFORMATION_MESSAGE);
				}

			}
		});

		connection2.setText("连接");
		connection2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				logger.info("获取数据库一的连接");
				ConnectionListener connectionListener = new ConnectionListener(
						hostname2.getText(), port2.getText().trim(), username2
								.getText().trim(), password2.getText().trim());
				conn2 = connectionListener.getConnection();
				if (null == conn2) {
					JOptionPane.showMessageDialog(null, "获取数据库连接失败", "提示",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					JOptionPane.showMessageDialog(null, "获取数据库连接成功", "提示",
							JOptionPane.INFORMATION_MESSAGE);
				}
			}
		});

		cancelconnection2.setText("取消");
		cancelconnection2
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						logger.info("清空数据库二的配置");
						hostname2.setText("");
						port2.setText("3306");
						username2.setText("");
						password2.setText("");
					}
				});

		org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(
				jPanel6);
		jPanel6.setLayout(jPanel6Layout);
		jPanel6Layout
				.setHorizontalGroup(jPanel6Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(jPanel6Layout
								.createSequentialGroup()
								.addContainerGap()
								.add(jPanel6Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jPanel6Layout
												.createSequentialGroup()
												.add(jPanel6Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(jLabel36)
														.add(jLabel16))
												.add(52, 52, 52)
												.add(jPanel6Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(username2,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																203,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(jPanel6Layout
																.createParallelGroup(
																		org.jdesktop.layout.GroupLayout.TRAILING)
																.add(jPanel6Layout
																		.createSequentialGroup()
																		.add(test2)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.UNRELATED)
																		.add(connection2)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(cancelconnection2))
																.add(password2,
																		org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																		203,
																		org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
										.add(jPanel6Layout
												.createSequentialGroup()
												.add(jLabel9)
												.add(64, 64, 64)
												.add(port2,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														203,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.add(jLabel12)
										.add(jPanel6Layout
												.createSequentialGroup()
												.add(jLabel14)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(hostname2,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														203,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(filler3,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap(
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));
		jPanel6Layout
				.setVerticalGroup(jPanel6Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(jPanel6Layout
								.createSequentialGroup()
								.add(jPanel6Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jPanel6Layout
												.createSequentialGroup()
												.add(jLabel12)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(jPanel6Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(jLabel14)
														.add(hostname2,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
												.add(4, 4, 4))
										.add(org.jdesktop.layout.GroupLayout.TRAILING,
												jPanel6Layout
														.createSequentialGroup()
														.add(filler3,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(
																org.jdesktop.layout.LayoutStyle.UNRELATED)))
								.add(jPanel6Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(jLabel9)
										.add(port2,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(jPanel6Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(jLabel16)
										.add(username2,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(jPanel6Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(jLabel36)
										.add(password2,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(jPanel6Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(test2).add(connection2)
										.add(cancelconnection2))
								.addContainerGap()));

		org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(
				jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 28,
				Short.MAX_VALUE));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(0, 105,
				Short.MAX_VALUE));

		jPanel7.setBorder(javax.swing.BorderFactory
				.createTitledBorder("数据库信息："));
		jPanel7.setToolTipText("数据库比较工具V1");

		jLabel17.setText("数据库：");

		jLabel18.setText("数据表：");

		compare.setText("比较");

		cancelcompare.setText("取消");

		org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(
				jPanel7);
		jPanel7.setLayout(jPanel7Layout);
		jPanel7Layout
				.setHorizontalGroup(jPanel7Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(jPanel7Layout
								.createSequentialGroup()
								.addContainerGap()
								.add(jPanel7Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jLabel17).add(jLabel18))
								.add(jPanel7Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jPanel7Layout
												.createSequentialGroup()
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.add(jPanel7Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(org.jdesktop.layout.GroupLayout.TRAILING,
																jPanel7Layout
																		.createSequentialGroup()
																		.add(filler4,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																		.add(0,
																				0,
																				Short.MAX_VALUE))
														.add(org.jdesktop.layout.GroupLayout.TRAILING,
																jPanel7Layout
																		.createSequentialGroup()
																		.add(83,
																				83,
																				83)
																		.add(compare)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(cancelcompare))))
										.add(org.jdesktop.layout.GroupLayout.TRAILING,
												jPanel7Layout
														.createSequentialGroup()
														.addPreferredGap(
																org.jdesktop.layout.LayoutStyle.RELATED,
																41,
																Short.MAX_VALUE)
														.add(jPanel7Layout
																.createParallelGroup(
																		org.jdesktop.layout.GroupLayout.LEADING)
																.add(org.jdesktop.layout.GroupLayout.TRAILING,
																		database,
																		org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																		203,
																		org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																.add(org.jdesktop.layout.GroupLayout.TRAILING,
																		datatable,
																		org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																		203,
																		org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
								.addContainerGap()));
		jPanel7Layout
				.setVerticalGroup(jPanel7Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(jPanel7Layout
								.createSequentialGroup()
								.add(jPanel7Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(database,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.add(jLabel17))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(jPanel7Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(datatable,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.add(jLabel18))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.UNRELATED)
								.add(jPanel7Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.BASELINE)
										.add(compare).add(cancelcompare))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(filler4,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));

		jPanel8.setBorder(javax.swing.BorderFactory
				.createTitledBorder("比较结果："));
		jPanel8.setToolTipText("数据库比较工具V1");

		result.setColumns(20);
		result.setRows(5);
		jScrollPane1.setViewportView(result);

		org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(
				jPanel8);
		jPanel8.setLayout(jPanel8Layout);
		jPanel8Layout
				.setHorizontalGroup(jPanel8Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(jPanel8Layout
								.createSequentialGroup()
								.add(jPanel8Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jPanel8Layout
												.createSequentialGroup()
												.add(267, 267, 267)
												.add(filler5,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
												.add(0, 0, Short.MAX_VALUE))
										.add(jPanel8Layout
												.createSequentialGroup()
												.addContainerGap()
												.add(jScrollPane1)))
								.addContainerGap()));
		jPanel8Layout.setVerticalGroup(jPanel8Layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				jPanel8Layout
						.createSequentialGroup()
						.add(jScrollPane1,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								254,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)
						.add(filler5,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.add(94, 94, 94)));

		jPanel9.setBorder(javax.swing.BorderFactory
				.createTitledBorder("所选表："));
		jPanel9.setToolTipText("数据库比较工具V1");

		left.setText(">>");
		right.setText("<<");

		jList1.setModel(new javax.swing.AbstractListModel() {
			String[] strings = { "  ", "  ", "  ", "  ", "  " };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		jScrollPane2.setViewportView(jList1);

		jList2.setModel(new javax.swing.AbstractListModel() {
			String[] strings = { "  ", "  ", "  ", "  ", "  " };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		jScrollPane3.setViewportView(jList2);

		org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(
				jPanel9);
		jPanel9.setLayout(jPanel9Layout);
		jPanel9Layout
				.setHorizontalGroup(jPanel9Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(jPanel9Layout
								.createSequentialGroup()
								.add(jPanel9Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jPanel9Layout
												.createSequentialGroup()
												.add(81, 81, 81)
												.add(filler6,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
												.add(0, 0, Short.MAX_VALUE))
										.add(jPanel9Layout
												.createSequentialGroup()
												.addContainerGap()
												.add(jScrollPane2)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.UNRELATED)
												.add(jPanel9Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(right)
														.add(org.jdesktop.layout.GroupLayout.TRAILING,
																left))
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(jScrollPane3,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														113,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap()));
		jPanel9Layout
				.setVerticalGroup(jPanel9Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(jPanel9Layout
								.createSequentialGroup()
								.add(jPanel9Layout
										.createParallelGroup(
												org.jdesktop.layout.GroupLayout.LEADING)
										.add(jPanel9Layout
												.createSequentialGroup()
												.add(35, 35, 35)
												.add(left)
												.addPreferredGap(
														org.jdesktop.layout.LayoutStyle.RELATED)
												.add(right)
												.add(0, 0, Short.MAX_VALUE))
										.add(org.jdesktop.layout.GroupLayout.TRAILING,
												jScrollPane3,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												0, Short.MAX_VALUE)
										.add(jScrollPane2,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												0, Short.MAX_VALUE))
								.addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED)
								.add(filler6,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)));

		jMenu1.setText("File");
		jMenuBar1.add(jMenu1);

		jMenu2.setText("Edit");
		jMenuBar1.add(jMenu2);

		setJMenuBar(jMenuBar1);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout
						.createSequentialGroup()
						.addContainerGap()
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.LEADING)
								.add(layout
										.createSequentialGroup()
										.add(layout
												.createParallelGroup(
														org.jdesktop.layout.GroupLayout.LEADING)
												.add(jPanel1,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
												.add(layout
														.createSequentialGroup()
														.add(jPanel7,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(
																org.jdesktop.layout.LayoutStyle.RELATED)
														.add(jPanel3,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(layout
												.createParallelGroup(
														org.jdesktop.layout.GroupLayout.LEADING)
												.add(jPanel9,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.add(jPanel6,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)))
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										jPanel8,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)).addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(layout
						.createSequentialGroup()
						.addContainerGap()
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.LEADING,
										false)
								.add(jPanel6,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.add(jPanel1,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE))
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED)
						.add(layout
								.createParallelGroup(
										org.jdesktop.layout.GroupLayout.LEADING)
								.add(jPanel3,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.add(jPanel7,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
								.add(jPanel9,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
										org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED)
						.add(jPanel8,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								300,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));

		jPanel1.getAccessibleContext().setAccessibleName("数据库比较工具");
		jPanel1.getAccessibleContext().setAccessibleDescription("数据库比较工具V1");

		pack();

		Container c = this.getContentPane();
		Dimension d = c.getSize();
		int pointX = (int) ((screenWidth - d.getWidth()) / 2);
		int pointY = (int) ((screenHeight - d.getHeight()) / 2);
		setLocation(pointX, pointY);

		datatable.addFocusListener(new FocusListener() {

			@Override
			public void focusGained(FocusEvent e) {
				logger.info("焦点集中");
				// if (!"nvmp".equals(database.getText().trim())) {
				DatatableListener datatableListener = new DatatableListener(
						hostname1.getText(), port1.getText().trim(), username1
								.getText().trim(), password1.getText().trim(),
						database.getText().trim());
				conn1 = datatableListener.getConnection();

				datatableListener = new DatatableListener(hostname2.getText(),
						port2.getText().trim(), username2.getText().trim(),
						password2.getText().trim(), database.getText().trim());
				conn2 = datatableListener.getConnection();
				// }
				datatable.removeAll();
				List<String> list = JDBCExec.getTables(conn1);
				for (String str : list) {
					datatable.add(str);
				}

				logger.info("选中数据表名为：" + datatable.getSelectedItem());

			}

			@Override
			public void focusLost(FocusEvent e) {
				logger.info("焦点失去");

			}

		});

		datatable.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				logger.info("点击鼠标选中数据表名为：" + datatable.getSelectedItem());
				jPanel9.setBorder(javax.swing.BorderFactory
						.createTitledBorder(datatable.getSelectedItem()));
				String dataTableName = datatable.getSelectedItem().trim();

				columnsName = JDBCExec.getColumns(conn1, dataTableName);

				defaultModel = new DefaultListModel();
				for (String element : columnsName) {
					defaultModel.addElement(element);
				}
				jList1.setModel(defaultModel);
			}

			@Override
			public void mousePressed(MouseEvent e) {
				logger.info("鼠标按下选中数据表名为：" + datatable.getSelectedItem());

			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				logger.info("鼠标释放选中数据表名为：" + datatable.getSelectedItem());

			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				logger.info("鼠标离开选中数据表名为：" + datatable.getSelectedItem());
			}

		});

		cancelcompare.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				logger.info("清空数据库及数据表");
				database.setText("");
				datatable.removeAll();

			}

		});

		result.setLineWrap(true);

		compare.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				logger.info("开始比较");

				ListModel columns = jList2.getModel();
				List<String> columnsName = new ArrayList<String>();
				for (int i = 0; i < columns.getSize(); i++) {
					String columnName = columns.getElementAt(i).toString()
							.trim();
					logger.info("columnName is : " + columnName);
					columnsName.add(columnName);
				}

				CompareListener compareListener = new CompareListener(conn1,
						conn2, database.getText().trim(), datatable
								.getSelectedItem().toString().trim(),
						columnsName);

				String lastresult = compareListener.getCompareResult();

				result.setText(lastresult);
				//
				// JOptionPane.showMessageDialog(null, lastresult, "提示",
				// JOptionPane.INFORMATION_MESSAGE);
			}

		});

		left.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				logger.info("向右选择");
				if (null != jList1.getSelectedValue()
						&& !("").equals(jList1.getSelectedValue())) {
					String selectValue = jList1.getSelectedValue().toString()
							.trim();
					logger.info("选择值为: " + selectValue);

					model.addElement(selectValue);
					jList2.setModel(model);
				}

			}

		});

		right.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				logger.info("向左选择");
				// if (null != jList2.getSelectedValue()
				// && !("").equals(jList2.getSelectedValue())) {
				// String selectValue = jList2.getSelectedValue().toString()
				// .trim();
				// logger.info("选择值为: " + selectValue);
				// model.removeElement(selectValue);
				// jList2.setModel(model);
				// }
				model.removeAllElements();
				jList2.setModel(model);

			}

		});

		JMenuItem openItem = new JMenuItem("Open ...");
		JMenuItem saveItem = new JMenuItem("Save");
		JMenuItem saveAsItem = new JMenuItem("Save As ...");
		JMenuItem exitItem = new JMenuItem("Exit", 'x');

		jMenu1.add(openItem);
		jMenu1.add(saveItem);
		jMenu1.add(saveAsItem);
		jMenu1.addSeparator();
		jMenu1.add(exitItem);

		openItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				logger.info("打开文件");

				JFileChooser jfc = new JFileChooser();
				jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
				jfc.showDialog(new JLabel(), "选择");
				File file = jfc.getSelectedFile();
				if (file == null||file.isDirectory()) {
					return;
				}
				if (file.isDirectory()) {
					System.out.println("文件夹:" + file.getAbsolutePath());
				} else if (file.isFile()) {
					System.out.println("文件:" + file.getAbsolutePath());
				}

				StatusSerlize reStatusSerlize = new StatusSerlize();
				String fileName = file.getAbsolutePath();
				OpenListener openListener = new OpenListener(reStatusSerlize,
						fileName);
				StatusSerlize statusSerlize = openListener.deSelizedObject();

				hostname1.setText(statusSerlize.getHostname1());
				port1.setText(statusSerlize.getPort1());
				username1.setText(statusSerlize.getUsername1());
				password1.setText(statusSerlize.getPassword1());

				hostname2.setText(statusSerlize.getHostname2());
				port2.setText(statusSerlize.getPort2());
				username2.setText(statusSerlize.getUsername2());
				password2.setText(statusSerlize.getPassword2());

				database.setText(statusSerlize.getDatabase());
				datatable.addItem(statusSerlize.getDatatable());
				jList1.setModel(statusSerlize.getColumns());
				jList2.setModel(statusSerlize.getSelectColumns());
				result.setText(statusSerlize.getResult());
			}

		});

		saveAsItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				logger.info("文件另存为");
				JFileChooser jfc = new JFileChooser();
				jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
				jfc.showDialog(new JLabel(), "选择");
				File file = jfc.getSelectedFile();

				StatusSerlize statusSerlize = new StatusSerlize();
				statusSerlize.setHostname1(hostname1.getText().trim());
				statusSerlize.setPort1(port1.getText().trim());
				statusSerlize.setUsername1(username1.getText().trim());
				statusSerlize.setPassword1(password1.getText().trim());

				statusSerlize.setHostname2(hostname2.getText().trim());
				statusSerlize.setPort2(port2.getText().trim());
				statusSerlize.setUsername2(username2.getText().trim());
				statusSerlize.setPassword2(password2.getText().trim());
				statusSerlize.setDatabase(database.getText().trim());
				statusSerlize.setDatatable(datatable.getSelectedItem().trim());
				statusSerlize.setColumns(jList1.getModel());
				statusSerlize.setSelectColumns(jList2.getModel());
				statusSerlize.setResult(result.getText().trim());
				SaveAsListener saveAsListener = null;
				if (file == null) {
					return;
				}
				if (!file.exists()) {
					System.out.println("文件不存在:" + file.getAbsolutePath());
					try{
						file = new File(file.getAbsolutePath());
						file.createNewFile();
					}catch(Exception e1){
						System.out.println("e"+e1);
					}
					
				}
                
				if (file.isDirectory()) {
					System.out.println("文件夹:" + file.getAbsolutePath());
					String fileDirectory = file.getAbsolutePath();
					saveAsListener = new SaveAsListener(null, fileDirectory,
							statusSerlize);

				} else if (file.isFile()) {
					String fileName = file.getAbsolutePath();
					saveAsListener = new SaveAsListener(fileName, null,
							statusSerlize);
					System.out.println("文件:" + file.getAbsolutePath());
				}
				saveAsListener.serlizeObject();
			}

		});

		saveItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				logger.info("文件存为");

				StatusSerlize statusSerlize = new StatusSerlize();
				statusSerlize.setHostname1(hostname1.getText().trim());
				statusSerlize.setPort1(port1.getText().trim());
				statusSerlize.setUsername1(username1.getText().trim());
				statusSerlize.setPassword1(password1.getText().trim());

				statusSerlize.setHostname2(hostname2.getText().trim());
				statusSerlize.setPort2(port2.getText().trim());
				statusSerlize.setUsername2(username2.getText().trim());
				statusSerlize.setPassword2(password2.getText().trim());
				statusSerlize.setDatabase(database.getText().trim());
				logger.info("datatable.getSelectedItem().trim()"
						+ datatable.getSelectedItem().trim());
				statusSerlize.setDatatable(datatable.getSelectedItem().trim());
				statusSerlize.setColumns(jList1.getModel());
				statusSerlize.setSelectColumns(jList2.getModel());
				statusSerlize.setResult(result.getText().trim());
				
				SaveListener saveListener = new SaveListener(null,null,statusSerlize);
				saveListener.serlizeObject();

			}

		});

		exitItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				// JFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			}

		});

	}// </editor-fold>

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels = javax.swing.UIManager
					.getInstalledLookAndFeels();
			for (int idx = 0; idx < installedLookAndFeels.length; idx++)
				if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
					javax.swing.UIManager
							.setLookAndFeel(installedLookAndFeels[idx]
									.getClassName());
					break;
				}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ContactEditor.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ContactEditor.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ContactEditor.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ContactEditor.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new ContactEditor().setVisible(true);
			}
		});

	}
	
	
	private static void initGlobalFont(){
	    FontUIResource fontUIResource = new FontUIResource(new Font("微软雅黑",Font.PLAIN, 12));
	    for (Enumeration keys = UIManager.getDefaults().keys(); keys.hasMoreElements();) {
	        Object key = keys.nextElement();
	        Object value= UIManager.get(key);
	        if (value instanceof FontUIResource) {
	            UIManager.put(key, fontUIResource);
	        }  
	    }
	}

	// Variables declaration - do not modify
	private javax.swing.JButton cancelcompare;
	private javax.swing.JButton cancelconnection1;
	private javax.swing.JButton cancelconnection2;
	private javax.swing.JButton compare;
	private javax.swing.JButton connection1;
	private javax.swing.JButton connection2;
	private javax.swing.JTextField database;
	private java.awt.Choice datatable;
	private javax.swing.Box.Filler filler1;
	private javax.swing.Box.Filler filler3;
	private javax.swing.Box.Filler filler4;
	private javax.swing.Box.Filler filler5;
	private javax.swing.Box.Filler filler6;
	private javax.swing.JTextField hostname1;
	private javax.swing.JTextField hostname2;

	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel13;
	private javax.swing.JLabel jLabel14;
	private javax.swing.JLabel jLabel15;
	private javax.swing.JLabel jLabel16;
	private javax.swing.JLabel jLabel17;
	private javax.swing.JLabel jLabel18;
	private javax.swing.JLabel jLabel36;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JPanel jPanel8;
	private javax.swing.JPanel jPanel9;

	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextField password1;
	private javax.swing.JTextField password2;
	private javax.swing.JTextField port1;
	private javax.swing.JTextField port2;
	private javax.swing.JTextArea result;
	private javax.swing.JButton test1;
	private javax.swing.JButton test2;
	private javax.swing.JTextField username1;
	private javax.swing.JTextField username2;

	private javax.swing.JList jList1;
	private javax.swing.JList jList2;
	private javax.swing.JButton left;
	private javax.swing.JButton right;

	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	// End of variables declaration

}
