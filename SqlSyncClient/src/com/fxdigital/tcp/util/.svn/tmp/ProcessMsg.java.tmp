package com.fxdigital.tcp.util;

import java.io.IOException;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.fxdigital.tcp.util.client.MessageSendClient;

/**
 * @author Administrator 消息处理实体类
 * 
 */
public class ProcessMsg {
	private static Map<String,String> map;
	private  Log logger = LogFactory.getLog(ProcessMsg.class);
	
	public Map<String, String> getMap() {
		return map;
	}

	public void setMap(Map<String, String> map) {
		this.map = map;
	}

	public  String sendMsg(IMsg imsg) throws IOException {
		System.out.println("send message" + imsg);
		if (null != imsg) {
			if (imsg instanceof Msg) {
				Msg msg = (Msg) imsg;
				// 调用Tcp底层通讯
				// String ip=GetSystemProperties.getLocalIp();
				String ip = msg.getIp();
				String msgStr = "the first msg";
				// Msg msg=new Msg();
				// msg.setIp("192.168.1.55");
				// String msg = "file transport";
				MessageSendClient.mysqlSyncStart(ip, imsg);
			}
		}

		return null;

	}

	public  void startExportMysql(String masterip, String slaveip) {
		Msg msg = new Msg();
		String flag = "mysqldumpexport";
		msg.setFlag(flag);
		msg.setMasterip(masterip);
		msg.setSlaveip(slaveip);
		msg.setIp(masterip);
		try {
			ProcessMsg processMsg=new ProcessMsg();
			processMsg.sendMsg((IMsg) msg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public  void startImportMysql(String masterip, String slaveip) {
		Msg msg = new Msg();
		String flag = "mysqldumpimport";
		msg.setFlag(flag);
		msg.setMasterip(masterip);
		msg.setSlaveip(slaveip);
		msg.setIp(masterip);
		try {
			ProcessMsg processMsg=new ProcessMsg();
			processMsg.sendMsg((IMsg) msg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public  void stopSynMysql(String masterip, String slaveip) {
		Msg msg = new Msg();
		String flag = "stopmysqlsync";
		msg.setFlag(flag);
		msg.setMasterip(masterip);
		msg.setSlaveip(slaveip);
		msg.setIp(masterip);
		try {
			ProcessMsg processMsg=new ProcessMsg();
			processMsg.sendMsg((IMsg) msg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public  void searchStopInfo(String masterip, String localip) {
		Msg msg = new Msg();
		String flag = "getstopmysqlsync";
		msg.setFlag(flag);
		msg.setMasterip(masterip);
		msg.setSlaveip(localip);
		msg.setIp(masterip);
		try {
			ProcessMsg processMsg=new ProcessMsg();
			processMsg.sendMsg((IMsg) msg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public  void startSynMysql(String masterip, String slaveip) {

		Msg msg = new Msg();
		String flag = "initmasterserver";
		msg.setFlag(flag);
		msg.setMasterip(masterip);
		msg.setSlaveip(slaveip);
		msg.setIp(masterip);
		try {
			ProcessMsg processMsg=new ProcessMsg();
			processMsg.sendMsg((IMsg) msg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public  void searchServerInfo(String masterip, String localip) {
		Msg msg = new Msg();
		String flag = "getserverinfo";
		msg.setFlag(flag);
		msg.setMasterip(masterip);
		msg.setSlaveip(localip);
		msg.setIp(masterip);
		try {
			ProcessMsg processMsg=new ProcessMsg();
			processMsg.sendMsg((IMsg) msg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public  void searchExportMysql(String masterip, String localip) {
		Msg msg = new Msg();
		String flag = "getdumpexportinfo";
		msg.setFlag(flag);
		msg.setMasterip(masterip);
		msg.setSlaveip(localip);
		msg.setIp(masterip);
		try {
			ProcessMsg processMsg=new ProcessMsg();
			processMsg.sendMsg((IMsg) msg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public  void searchServerStatus(String masterip, String localip) {
		Msg msg = new Msg();
		String flag = "getseverstatus";
		msg.setFlag(flag);
		msg.setMasterip(masterip);
		msg.setSlaveip(localip);
		msg.setIp(masterip);
		try {
			ProcessMsg processMsg=new ProcessMsg();
			processMsg.sendMsg((IMsg) msg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public  void allStartSynMysql(String masterip, String slaveip) {

		Msg msg = new Msg();
		String flag = "allstartsynmysql";
		msg.setFlag(flag);
		msg.setMasterip(masterip);
		msg.setSlaveip(slaveip);
		msg.setIp(masterip);
		try {
			ProcessMsg processMsg=new ProcessMsg();
			processMsg.sendMsg((IMsg) msg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public  void receiveMsg(IMsg imsg) {
		logger.info("收到消息" + imsg);
		logger.info("消息标识" + imsg.getFlag());
		if (null != imsg) {
			if (imsg instanceof Msg) {
				if (imsg.getFlag().equals("backserverinfo")) {
					Msg msg = (Msg) imsg;
					 map = msg.getProperties();
					logger.info("返回标识" + "flag: " + map.get("flag")
							+ " master: " + map.get("master") + " slave: "
							+ map.get("slave") + " result: "
							+ map.get("result") + " time: " + map.get("time"));
				}
				if (imsg.getFlag().equals("backserverstatus")) {
					Msg msg = (Msg) imsg;
					 map = msg.getProperties();
					logger.info("返回标识" + "flag: " + map.get("flag")
							+ " process: " + map.get("process") + " status: "
							+ map.get("status") + " isActive: "
							+ map.get("isActive"));
				}
				if (imsg.getFlag().equals("backdumpexport")) {
					Msg msg = (Msg) imsg;
					 map = msg.getProperties();
					logger.info("返回标识" + "flag: " + map.get("flag")
							+ " success: " + map.get("success"));
					if (null!=map.get("success")&&map.get("success").equals("success")) {
						logger.info("导出文件成功！");
					} else {
						logger.info("导出文件失败！");
					}
				}
				if (imsg.getFlag().equals("backdumpimport")) {
					Msg msg = (Msg) imsg;
					 map = msg.getProperties();
					logger.info("返回标识" + "flag: " + map.get("flag")
							+ " success: " + map.get("success"));
					if (null!=map.get("success")&&map.get("success").equals("success")) {
						logger.info("导入文件成功！");
					} else {
						logger.info("导入文件失败！");
					}
				}
				if(imsg.getFlag().equals("backstopmysqlsync")){

					Msg msg = (Msg) imsg;
					 map = msg.getProperties();
					logger.info("返回标识" + "flag: " + map.get("flag")
							+ " success: " + map.get("success"));
					if (null!=map.get("success")&&map.get("success").equals("success")) {
						logger.info("解除互备成功！");
					} else {
						logger.info("解除互备失败！");
					}
				
				}
			}
		}

	}
	
	

	public  void main(String[] args) throws IOException {
		// MessageReceiveServer.startMessageReceiveServer();

		// 1.启动主备配置指令
//		 String masterip = "192.168.1.127";
//		 String slaveip = "192.168.1.122";
//		 startSynMysql(masterip, slaveip);

		// 2.查询服务器同步情况
//		 String masterip = "192.168.1.127";
//		 String localip = "192.168.1.55";
//		 searchServerInfo(masterip,localip);

		// 3.查询服务器设置主备是否成功
//		 String masterip = "192.168.1.224";
//		 String localip = "192.168.1.55";
//		 searchServerStatus(masterip,localip);

		// 4.手工导出mysql
//		String masterip = "192.168.1.134";
//		String slaveip = "192.168.1.127";
//		startExportMysql(masterip,slaveip);

		// 5.查询是否导出成功
//		 String masterip = "192.168.1.134";
//		 String localip="192.168.1.55";
//		 searchExportMysql(masterip,localip);
		
		// 5.手工导入mysql
//		 String masterip = "192.168.1.127";
//		 String localip= "192.168.1.55";
//		 startImportMysql(masterip,localip);
		
		 //6.解除互备指令
		 String masterip = "192.168.1.235";
		 String slaveip= "192.168.1.224";
		 stopSynMysql(masterip,slaveip);
		 
		 //7.查询解除是否成功
//		String masterip = "192.168.1.122";
//		String localip="192.168.1.55";
//		searchStopInfo(masterip,localip);
		 
		 
		 //8.导出，导入，互备一条龙指令
//			String masterip = "192.168.1.134";
//			String slaveip="192.168.1.127";
//			allStartSynMysql(masterip,slaveip);

	}
}
