package NVMP.DeviceManage.Implement;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JRootPane;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

//import com.sqlite.factory.DAOFactory;

import corenet.exchange.ExchangeClient;

//import NVMP.test.LoginCenter;
import Runtime.IConnectOK;

 
public class LoginDevice extends javax.swing.JFrame implements IConnectOK {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/** Creates new form LoginFrm */
    public LoginDevice() {
    	init();
    }

    
    public void init() {
    	path = ClassLoader.getSystemResource("").toString();
    	if(path.length()>6){
    		path = ClassLoader.getSystemResource("").toString().substring(6);
    	}else{
    		path = "E:\\";
    	}
    	
    	
    	initComponents();
		hiddenLabel();
		setFrameCenter(this);

		if (isExists()) {
			readXml();
		}
	}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
    	//去掉标题栏的图标
		Toolkit kit=Toolkit.getDefaultToolkit();
		Image img=kit.getImage("*.gif");
		setIconImage(img);
		//去掉最大化最小化按钮 
		setUndecorated(true);    
        getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSessionId = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        txtIP = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
		lblSessionId = new javax.swing.JLabel();
		lblIP = new javax.swing.JLabel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
       
        setTitle("客户端登录"); // NOI18N
        setName("Form"); // NOI18N

        jLabel1.setFont(new Font("宋体", Font.BOLD, 16)); // NOI18N
		jLabel1.setText("SessionId:"); // NOI18N
		jLabel1.setName("jLabel1"); // NOI18N

		jLabel2.setFont(new Font("宋体", Font.BOLD, 16)); // NOI18N
		jLabel2.setText("  I    P :"); // NOI18N
		jLabel2.setName("jLabel2"); // NOI18N

		jLabel3.setFont(new Font("宋体", Font.BOLD, 16)); // NOI18N
		jLabel3.setText("P o r t  :"); // NOI18N
		jLabel3.setName("jLabel3"); // NOI18N

		txtSessionId.setName("txtSessionId"); // NOI18N

		lblPort.setName("txtPort"); // NOI18N

        txtIP.setName("txtIP"); // NOI18N

        lblPort.setText("Port不能为空"); // NOI18N
		lblPort.setName("jLabel4"); // NOI18N
		lblPort.setFont(new Font("宋体", Font.BOLD, 16)); // NOI18N
		lblPort.setForeground(Color.red);

		lblSessionId.setText("SessionId不能为空"); // NOI18N
		lblSessionId.setName("jLabel5"); // NOI18N
		lblSessionId.setFont(new Font("宋体", Font.BOLD, 16)); // NOI18N
		lblSessionId.setForeground(Color.red);

		lblIP.setText("IP不能为空"); // NOI18N
		lblIP.setName("jLabel6"); // NOI18N
		lblIP.setFont(new Font("宋体", Font.BOLD, 16)); // NOI18N
		lblIP.setForeground(Color.red);
        jFileChooser1.setName("jFileChooser1"); // NOI18N

        jButton2.setText("登录"); // NOI18N
        jButton2.setName("btnLogin"); // NOI18N
        jButton2.setFont(new Font("宋体", Font.BOLD, 16));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("取消"); // NOI18N
        jButton3.setName("btnCancel"); // NOI18N
        jButton3.setFont(new Font("宋体", Font.BOLD, 16));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                            .addComponent(txtIP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                            .addComponent(txtSessionId, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSessionId, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSessionId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(lblIP, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(lblPort, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSessionId, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(49, 49, 49)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    	if (validateAdd()) {
//			LoginCenter.setValue(txtSessionId.getText(),
//					txtIP.getText(), txtPort.getText());
//			//初始化本地数据库
//	    	DAOFactory.getPojoImpl().init("http://"+LoginCenter.ip+":8080/webservice/services/web");
//			writeXml();
//			DeviceRun1 cr = new DeviceRun1(LoginCenter.sessionId,LoginCenter.ip,
//					Integer.parseInt(LoginCenter.port));
//			cr.setConnectOK(lv);
			// LoginCenter.launch(LoginCenter.class, args);
			while(!result){
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			//设置用户上线
//			cr.getSmd().GetEncodeDeviceOnline(LoginCenter.sessionId);
			
			//设置窗体显示的风格
			try {
				javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			//显示设备服务器窗体
//			new DeviceView(cr).setVisible(true);
			dispose();
		}
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    	dispose();
    }
    

	/**
	 * 点击保存按钮的时候，验证组件信息是否为空
	 * 
	 * @return
	 */
	public boolean validateAdd() {
		if (txtSessionId.getText().trim().equals("")) {
			lblSessionId.setText("       SessionId不能为空");
			lblIP.setText("  ");
			lblPort.setText("   ");
			return false;
		} else if (txtIP.getText().trim().equals("")) {
			lblIP.setText("       IP不能为空");
			lblSessionId.setText("");
			lblPort.setText("");
			return false;
		} else if (txtPort.getText().trim().equals("")) {
			lblPort.setText("       端口号不能为空");
			lblSessionId.setText("");
			lblIP.setText(" ");
			return false;
		} else if (!isNumeric(txtPort.getText())) {
			lblPort.setText("       端口号只能是数字");
			lblSessionId.setText("");
			lblIP.setText("");
			return false;
		} else {
			lblSessionId.setText("");
			lblPort.setText(" ");
			lblIP.setText("");
			return true;
		}
	}

	/**
	 * 隐藏所有错误提示信息
	 */
	public void hiddenLabel() {
		lblSessionId.setText("   ");
		lblIP.setText("   ");
		lblPort.setText("");
	}

	/**
	 * 使窗体居中显示
	 * 
	 * @param jfr
	 */
	public void setFrameCenter(JFrame jfr) {
		Toolkit kit = Toolkit.getDefaultToolkit();
		Dimension screenSize = kit.getScreenSize();
		int screenHeight = screenSize.height;
		int screenWidth = screenSize.width;
		int frameH = jfr.getHeight();
		int frameW = jfr.getWidth();
		jfr.setLocation((screenWidth - frameW) / 2, (screenHeight - frameH) / 2);
	}

	/*
	 * 读取XML文件
	 */
	public void readXml() {
		SAXBuilder sb = new SAXBuilder();
		try {
			Document doc = sb.build(path + "login.xml");
			Element root = doc.getRootElement();
			String sessionId = root.getChildText("sessionId");
			String ip = root.getChildText("IP");
			String port = root.getChildText("Port");
			txtSessionId.setText(sessionId);
			txtIP.setText(ip);
			txtPort.setText(port);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * 将文本写入XML文件
	 */
	public void writeXml() {
		try {
			Element root, element, text;
			Document Doc;
			// 创建一个根目录
			root = new Element("loginInfo");
			// 把这个根目录放入XML文件中
			Doc = new Document(root);
			// 得到文档中的根目录
			root = Doc.getRootElement();

			// 创建一个SessionId的子对象
			element = new Element("sessionId");
			// 设置他的值
			text = element.setText(txtSessionId.getText());
			// 用root将其加载到
			element = root.addContent(text);
			// 创建一个IP的子对象
			element = new Element("IP");
			text = element.setText(txtIP.getText());
			element = root.addContent(text);
			// 创建一个Port的子对象
			element = new Element("Port");
			text = element.setText(txtPort.getText());
			element = root.addContent(text);

			// 创建XML输出的对象
			XMLOutputter XMLOut = new XMLOutputter();
			// XMLOut.setEncoding(\"gb2312\");
			XMLOut.output(Doc, new FileOutputStream(path + "login.xml"));
			list = new ArrayList<String>();
			list.add(txtSessionId.getText());
			list.add(txtIP.getText());
			list.add(txtPort.getText());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 判断XML文件是否存在
	 * 
	 * @return
	 */
	public boolean isExists() {
		File f = new File(path + "login.xml");
		return f.exists();
	}

	/**
	 * 判断输入的端口号是否是数字
	 * 
	 * @param str
	 * @return
	 */
	public boolean isNumeric(String str) {
		for (int i = 0; i < str.length(); i++) {
			// System.out.println(str.charAt(i));
			if (!Character.isDigit(str.charAt(i))) {
				return false;
			}
		}
		return true;
	}
	
	public LoginDevice lv = this;
	
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	//设置窗体显示的风格
    			try {
    				javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
    			} catch (Exception e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
                new LoginDevice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblPort;
	private javax.swing.JLabel lblSessionId;
	private javax.swing.JLabel lblIP;
    private javax.swing.JTextField txtSessionId;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtIP;
    // End of variables declaration
    public List<String> list;
	private static String path ;
	boolean result = false;
	
	@Override
	public void connect() {
		// TODO Auto-generated method stub
		result = true;
	}


	@Override
	public ExchangeClient onAgainConnect() {
		// TODO Auto-generated method stub
		return null;
	}
	
}
