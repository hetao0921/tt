package NVMP.AppService.Implement;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;

import java.io.File;
import java.io.FileInputStream;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.jdom.input.SAXBuilder;
import org.misc.log.LogUtil;

import NVMP.AppService.ServerInit;
import NVMP.AppService.util.GetDeviceId;
import NVMP.AppService.util.MethodUtil;
import NVMP.AppService.util.ParamInfo;
import NVMP.AppService.util.ProxyObj;
import NVMP.AppService.util.ProxyObj.typeSelect;
import NVMP.AppService.util.ProxyUtil;

import NVMP.AppService.Implement.Interface.IDisplayInfo;
import NVMP.AppService.Interface.*;
import org.misc.RefObject;

import NVMP.AppService.util.ProxyList;

import corenet.exchange.Group.GroupPoolTool;

import corenet.exchange.*;
import corenet.netbase.Interface.*;
import corenet.rpc.*;
import corenet.exchange.Interface.ExchangeServerMessage;

///////////////////////////////////////////////////////////
//  ApplicationServer.cs
//  Implementation of the Class ApplicationServer
//  Generated by Enterprise Architect
//  Created on:      30-ÎåÔÂ-2011 16:34:49
//  Original author: Administrator 
///////////////////////////////////////////////////////////

//C# TO JAVA CONVERTER TODO TASK: Delegates are not available in Java:
//public delegate void DisplayInfoEvent(object sender,string info);

public class ApplicationServer implements IAppRuntime, ExchangeServerMessage {

	private static String CurChannel; // TLS±äÁ¿
	private String lev;
	private int limitNum;
	
	private Map<String,DomainLock> domainLockMap;

	public String getLev() {
		return lev;
	}

	public void setLev(String lev) {
		this.lev = lev;
	}

	// public int getLimitNum() {
	// return limitNum;
	// }
	//
	// public void setLimitNum(int limitNum) {
	// this.limitNum = limitNum;
	// }

	// C# TO JAVA CONVERTER TODO TASK: Events are not available in Java:
	// public event DisplayInfoEvent DisplayInfo;
	public String getServerId() {
		return this._ExchangeServer.getServerID();

	}

	private java.util.HashMap<String, IBusinessDomain> BusinessDomainList;

	public java.util.HashMap<String, IBusinessDomain> getBusinessDomainList() {
		return BusinessDomainList;
	}

	synchronized public void OnDomainMessage(String Sessionid, String Groupid,
			String state, String type) {

		for (IBusinessDomain id : BusinessDomainList.values()) {
			ServerSideDomain ssd = (ServerSideDomain) id;
			ServerSideDomain ssd2 = (ServerSideDomain) ssd._Domain;
			ssd2._Domain.OnDomainMessage(Sessionid, Groupid, state, type);

		}

	};

	// 这里汇总所有相关业务的全部相关处理信息
	public List<IMessage> getCenterMessage() {
		List<IMessage> list = new LinkedList<IMessage>();
		for (IBusinessDomain id : BusinessDomainList.values()) {
			ServerSideDomain ssd = (ServerSideDomain) id;
			ServerSideDomain ssd2 = (ServerSideDomain) ssd._Domain;
			List<IMessage> l = ssd2._Domain.getCenterMessage();
			if (l != null)
				list.addAll(l);

		}

		return list;
	}

	/**
	 * ÌíŒÓÒ»žö×é
	 * */
	public boolean CreateGroup(String groupName) {
		return GroupPoolTool.Instance().CreateGroup(groupName);
	}

	public void jionGroup(String userId, String group) {

		IChannel[] ics = GroupPoolTool.Instance().foundChannel(
				"Session://" + userId);
		if (ics == null) {

			System.out.println("==============不该出现没找到计入的session" + userId);
			return;
		}
		for (IChannel ic : ics) {

			// GroupPoolTool.Instance().JoinGroup(ic, group);

			this._ExchangeServer.JoinGroup(ic, group);

		}

	};

	/**
	 * »ñÈ¡Ä¿Ç°ËùÓÐ×éÃû
	 * 
	 * */
	public List<String> ShowGroupList() {

		return GroupPoolTool.Instance().ShowGroupList();

	}

	// /**
	// * Èº·¢ÇëÇóÏûÏ¢³öÈ¥
	// * */
	//
	// public void LocalChannelSendMessage(IMessage message) {
	//
	// // String url = "TestDomain.Foo.Test1";
	// // HashMap<String, Object> Params = new HashMap<String, Object>();
	// // Params.put("s", "sdfsdafsadf");
	//
	// // BaseMessage Message = new BaseMessage();
	// // Message.AddParams(Params);
	// // Message.SetAction("Event");
	// // Message.SetObjURL(Url);
	//
	// for (IChannel ic : clientPool.keySet()) {
	// ic.SendMessage(message);
	// }
	//
	// }

	private ExchangeServer _ExchangeServer;

	public ExchangeServer get_ExchangeServer() {
		return _ExchangeServer;
	}

	/**
	 * by zzw
	 * 
	 * ŽËŽŠÊÇÎªÁË¶Ô±ŸµØŽúÀíÀàœøÐÐ±£Žæ£¬·œ±ãµ÷ÓÃ
	 * 
	 * */

	private ProxyList proxyList;

	public Object LookupProxy(String name) {
		return proxyList.foundProxy(name);
	};

	/**
	 * by zzw
	 * 
	 * ÎªÁËÊÂŒþ
	 * */
	private IDisplayInfo idi;

	public IDisplayInfo getIdi() {
		return idi;
	}

	public void setIdi(IDisplayInfo idi) {
		this.idi = idi;
	}

	public final String GetCurChannel() {
		return CurChannel;
	}

	/**
	 * by zzw ÊÂŒþÏìÓŠÊµÏÖ HandleExchangeServerMessage žÄÃûÎª
	 * OnExchangeServerMessage
	 * */

	synchronized final public IMessage Dispatch(IMessage Message) {

		if (Message == null) {
			LogUtil.error("消息尽然是空的！！");
			return null;
		}
		// LogUtil.debug("接收新息："+Message.Serilize());
		String ObjURL = Message.GetObjURL();
		if (ObjURL ==null) {
			System.out.println("ObjURL is null");
		}
		int Index = ObjURL.lastIndexOf('.');
		String ObjName = ObjURL.substring(0, Index);
		String MethodName = ObjURL.substring(Index + 1,
				Index + 1 + ObjURL.length() - (Index + 1));

		//这里判断是否能进行工作。
		if(domainLockMap.containsKey(ObjName)) {
			if(!domainLockMap.get(ObjName).isOpen()) {
				LogUtil.error("Domain lock is close");
				return null;
			}
		}
		
		
		// DisplayRunInfo("HandleExchangeServerMessage ObjName = " + ObjName
		// + " MethodName = " + MethodName);

		IBusinessObject Obj = (IBusinessObject) this.LookupObject(ObjName);
		IMessage RetMessage = null;
		if (Obj != null) {
			RetMessage = Obj.CallMethod(MethodName, Message);
			// LogUtil.debug(RetMessage==null?"空的返回数据":RetMessage.Serilize());

		}

		return RetMessage;
	}

	synchronized public void OnExchangeServerMessage(IChannel Channel,
			IMessage Message) {

		// 先停止一切转发.
		continueFlag = false;
		IMessage RetMessage = Dispatch(Message);

		if (RetMessage != null && Channel != null) {
			Channel.SendMessage(RetMessage);
		}

	}

	synchronized public final void SetCurChannel(String ChannelIds) {
		CurChannel = ChannelIds;
	}

	private void DisplayRunInfo(String info) {

		// System.out.println(info);
		LogUtil.info(info);

		try {
			if (idi != null) {
				idi.DisplayInfo(this, info);
			}
		} catch (Exception e) {
			e.printStackTrace();
			LogUtil.error("什么问题的说？" + e.getMessage());
		}
	}

	public IChannel[] FindChannel(String ChannelIds) {
		return _ExchangeServer.FindChannel(ChannelIds);
	}

	//
	// ChannelIds,ÓÖµ÷ÓÃÕßžøÈë£¬DomainName
	//
	// public final IChannel CreateLocalChannel(String ChannelIds) {
	// return null;
	// }

	/**
	 * 关于级联的考虑，如果我们找到了，我们
	 * 
	 * 
	 * */

	public final void EventHandler(java.util.HashMap<String, Object> Params,
			Object Context) {
		BaseMessage Message = new BaseMessage();
		Message.AddParams(Params);
		Message.SetAction("Event");
		Message.SetObjURL((String) Context);

		// 用Local://标示为本中心内部处理，不出去外部
		if (CurChannel.length() >= 8
				&& CurChannel.substring(0, 8).equals("Local://")) {

			String temp = CurChannel.substring(8);
			IChannel[] ics = GroupPoolTool.Instance().foundChannel(temp);
			if (ics != null)
				for (IChannel Channel : ics) {
					Channel.SendMessage(Message);
				}
			return;
		}

		// 个人的话，判断是否存在，如果不在的话，发送全网。
		try {
			if (CurChannel.length() >= 10
					&& CurChannel.substring(0, 10).equals("Session://")) {
				IChannel[] ics = GroupPoolTool.Instance().foundChannel(
						CurChannel);

				if (ics != null && ics.length == 1) {
					ics[0].SendMessage(Message);
					return;
				}

			} else {

				IChannel[] ics = GroupPoolTool.Instance().foundChannel(
						CurChannel);

				if (ics != null) {

					for (IChannel Channel : ics) {
						Channel.SendMessage(Message);
					}
				}

			}

			// 继续全局转发。
			LocalChannelSendMessage(Message, CurChannel,
					this._ExchangeServer.getServerID(), null);

		} catch (Exception e) {
			System.out.println(Params.toString());
			e.printStackTrace();
		}

	}

	/**
	 * Íš¹ýÃû³Æ²éÕÒÒ»žö¶ÔÏó£º 1.²éÕÒµÄ¶ÔÏó³ý×¢²áµÄÒµÎñ¶ÔÏó
	 * 2.ÏµÍ³ÃüÃû¿ÕŒäÏÂµÄ¶ÔÏó¡£
	 * 
	 * @param Name
	 */
	public final Object LookupObject(String Name) {
		int Index = Name.indexOf(".");

		IBusinessObject aObject = null;

		String DomainName = Name.substring(0, Index);
		String ObjectName = Name.substring(Index + 1, Index + 1 + Name.length()
				- Index - 1);

		try {
			IBusinessDomain Domain = BusinessDomainList.get(DomainName);
			aObject = ((ServerSideDomain) Domain).FindObject(ObjectName);

		} catch (Exception e) {
			LogUtil.error("LookUpObject失败" + e.toString());
		}

		if (aObject == null) {
			// ÏµÍ³»¯ÃüÃû¿ÕŒäÏÂµÄ¶ÔÏó
			// ...
			LogUtil.error("找不到该方法" + ObjectName + " " + DomainName);
		}

		return aObject;
	}

	/**
	 * ÏòÓŠÓÃ·þÎñÆ÷×¢²áÒ»žöÒµÎñ¶ÔÏó
	 * 
	 * @param o
	 * @param Name
	 */
	public final boolean RegisterObject(String DomainName, Object o,
			String ObjectName) {

		// System.out.println("-------------RegisterObject " + DomainName + " "
		// + ObjectName + "-------------");

		IBusinessDomain Domain = BusinessDomainList.get(DomainName);
		if (Domain.equals(null)) {
			// 记录错误日志
			return false;
		}
		if (ObjectName.length() == 0) {
			ObjectName = o.getClass().getSimpleName();
		}

		// System.out.println("+++++++++++++++ RegisterObject " + DomainName +
		// " " + ObjectName + "+++++++++++++");

		IBusinessObject BusinessObject = null;

		RefObject<IBusinessObject> tempRef_BusinessObject = new RefObject<IBusinessObject>(
				BusinessObject);
		// 异常抛出点
		GetMethods(o, tempRef_BusinessObject, DomainName);
		BusinessObject = tempRef_BusinessObject.argvalue;

		// BusinessObject.argvalue.AddMethod(aNVMPMethodInfo.getName(),
		// aNVMPMethodInfo);
		java.lang.Class<?> type = o.getClass();

		/**
		 * by zzw
		 * 
		 * */
		// EventInfo[] EventInfos = type.GetEvents();

		Field[] EventInfos = type.getDeclaredFields();

		// ÔËÐÐ»·Ÿ³ this;IAppRuntime
		// java.lang.reflect.Method EventHalderMethod = null;
		// try {
		// EventHalderMethod =
		// this.getClass().getMethod("EventHandler",this.getClass());
		// } catch (SecurityException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (NoSuchMethodException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }

		for (Field Info : EventInfos) {
			if (NMVPAttribute.IsEventRemoting(Info)) {

				try {
					Method m = null;
					for (Method n : this.getClass().getMethods()) {
						if (n.getName().equals("EventHandler")) {
							m = n;
							break;
						}
					}

					// Method m =
					// this.getClass().getDeclaredMethod("EventHandler",HashMap.class,String.class);

					JavaCodeGen.HookEvent(Info, o, this, DomainName + "."
							+ Info.getType().getSimpleName(), m);
				} catch (Exception e) {
					e.printStackTrace();

				}

				LogUtil.debug("这里初始一个事件" + Info.getName());

			}
		}

		ServerSideDomain ServerDomain = ((ServerSideDomain) Domain);

		ServerDomain.AddObject(ObjectName, BusinessObject);
		return true;
	}

	public final void AddDomain(String DomainName, IBusinessDomain Domain) {
		IBusinessDomain _Domain = new ServerSideDomain(Domain);
		BusinessDomainList.put(DomainName, _Domain);
	}

	public final void GetMethods(Object obj,
			RefObject<IBusinessObject> BusinessObject, String domain) {

		BusinessObject.argvalue = new BaseBusinessObject(obj);
		NVMPMethodInfo aNVMPMethodInfo;

		// »ñÈ¡¹«¹²·œ·š
		java.lang.Class<?> type;
		// java.lang.reflect.Method method;

		type = obj.getClass();
		java.lang.reflect.Method[] methods = type.getMethods();

		aNVMPMethodInfo = null;

		// System.out.println("GetMethods enter");
		try {

			// System.out.println("-----------------method: " +
			// method1.getName() + "---------");
			for (java.lang.reflect.Method method1 : methods) {
				if (!NMVPAttribute.IsRemoting(method1)) {
					continue;
				}

				// System.out.println("-------remote method: " +
				// method1.getName() + "---------");

				aNVMPMethodInfo = new NVMPMethodInfo();
				aNVMPMethodInfo.setName(method1.getName());
				aNVMPMethodInfo.setMethodInfo(method1);
				// BusinessObject.AddMethod(aNVMPMethodInfo.Name,
				// aNVMPMethodInfo);

				/**
				 * by zzw ÓÖÒª±£Žæ²ÎÊýÀàÐÍ£¬Ò²Òª±£Žæ²ÎÊýÃû×Ö
				 * */
				// aNVMPMethodInfo.setParamInfo(method1.getParameters());

				assert (type != null);

				aNVMPMethodInfo.setParamInfo(MethodUtil
						.getMethodParamInfoToArray(type, method1.getName()));

				// Â¥ÏÂÊÇ¶Ô·œ·š·µ»ØµÄŒÇÂŒ
				ParamInfo[] pojreturnArray = null;

				Class<?> type2 = method1.getReturnType();
				if (type2.getName().equals("int")
						|| type2.getName().equals("java.lang.String")
						|| type2.getName().equals("boolean")
						|| type2.getName().equals("java.lang.Integer")
						|| type2.getName().equals("java.lang.Boolean")) {

					ReturnParam[] rpArray = new ReturnParam[1];

					for (int i = 0; i < 1; i++) {
						rpArray[i] = new ReturnParam();
					}

					aNVMPMethodInfo.setRetParam(rpArray);
					try {
						aNVMPMethodInfo.getRetParam()[0].RetType = type2;
						aNVMPMethodInfo.getRetParam()[0].RetName = "Result";

						pojreturnArray = new ParamInfo[1];
						pojreturnArray[0] = new ParamInfo();
						pojreturnArray[0].setType(type2.getName());
						pojreturnArray[0].setName("Result");

					} catch (Exception e) {
						e.printStackTrace();

					}
				}

				else if (type2.getName().equals("Void")) {
					// nothing
				} else // ·µ»ØÒ»žöœá¹¹£šÖµ¶ÔÏó£©
				{
					// ±éÀú type µÃµœËùÓÐ¹«¹² ×Ö¶Î(ÊôÐÔ£©

					/**
					 * by zzw
					 * */
					// PropertyInfo[] propertyies = type.GetProperties();
					Field[] propertyies = type2.getFields();

					ReturnParam[] rpArray = new ReturnParam[propertyies.length];

					pojreturnArray = new ParamInfo[propertyies.length];

					for (int i = 0; i < rpArray.length; i++) {
						rpArray[i] = new ReturnParam();
						pojreturnArray[i] = new ParamInfo();

					}

					aNVMPMethodInfo.setRetParam(rpArray);
					for (int i = 0; i < propertyies.length; i++) {
						// PropertyInfo pro = propertyies[i];
						Field pro = propertyies[i];

						try {
							aNVMPMethodInfo.getRetParam()[i].RetType = pro
									.getType();
							aNVMPMethodInfo.getRetParam()[i].RetName = pro
									.getName();

							pojreturnArray[i].setType(pro.getType().getName());
							pojreturnArray[i].setName(pro.getName());

						} catch (Exception e) {
							e.printStackTrace();
						}

					}

				}

				// System.out.println("GetMethods 生成代理");
				// ¿ªÊŒÉú³Éfunction¶ÔÏó
				ProxyObj poj = new ProxyObj();
				poj.setName(method1.getName());
				poj.setDomainName(domain + "." + obj.getClass().getSimpleName()
						+ "." + method1.getName());
				poj.setType(typeSelect.function);
				poj.setParamInfoArray(aNVMPMethodInfo.getParamInfo());

				poj.setReturnType(pojreturnArray);
				ProxyUtil.getProxyFile(domain).getFunctionList().add(poj);
				LogUtil.debug("文件加入function已成功，方法全名" + poj.getDomainName());

				BusinessObject.argvalue.AddMethod(aNVMPMethodInfo.getName(),
						aNVMPMethodInfo);

			}

			// System.out.println("GetMethods leave");

		} catch (Exception e) {
			e.printStackTrace();
		}

		// œâÎö·œ·šµÄ²ÎÊýÃû³Æ¡¢ÀàÐÍ,·µ»ØÖµÃû³Æ¡¢ÀàÐÍ

	}

	private ServerInit serverInit;

	public ApplicationServer() {
		BusinessDomainList = new java.util.HashMap<String, IBusinessDomain>();
		domainLockMap = new java.util.HashMap<String, DomainLock>();
		proxyList = new ProxyList();

		_ExchangeServer = new ExchangeServer();

		/**
		 * 初始化外部加载的服务器初始化环境。
		 * */
		try {
			String path = null;
			if (System.getProperty("os.name").equals("Linux"))
				path = "/etc/fxconf/AppService/AppService.conf";
			else
				path = "d:\\fxconf\\AppService\\AppService.conf";

			// 读一下配置文件中的配置。
			SAXReader saxReader = new SAXReader();
			Document doc = saxReader.read(new File(path));

			String tempString = doc.getRootElement().element("AppServer")
					.element("SessionID").element("session-class")
					.getTextTrim();

			Object o = Class.forName(tempString).newInstance();
			

			serverInit = (ServerInit) o;
//			serverInit = TestInit.getInstance();
			
			serverInit.setAppRuntime(this);

			if (serverInit.getSessionID() == null) {

				LogUtil.error("Server no sessionid");
				System.exit(1);
			}
			LogUtil.BusinessInfo("this serverID :" + serverInit.getSessionID());
			_ExchangeServer.setServerID(serverInit.getSessionID(),serverInit);

		} catch (Exception e) {
			LogUtil.error("加载外部初始化报错 " + e.getMessage());
			for (StackTraceElement s : e.getStackTrace()) {
				LogUtil.SessionInfo("error by ==" + s.toString());
			}
			System.exit(1);

		}

	}

	protected void finalize() throws Throwable {

	}

	public void dispose() {

	}

	public final void Run(ApplicationServer AppServer) {

		AppServer.DisplayRunInfo("应用服务开始运行啦！！");

		ManagedLoader ml = new ManagedLoader();

		System.out.println(ClassLoader.getSystemResource(""));
		/**
		 * by zzw 读取xml文件，按照文件生成
		 * */
		String str = SysProperty.getConfPath();
		System.out.println("read from " + str);
		VisitXML vx = new VisitXML(SysProperty.getConfPath());

		String ServerIp = "0.0.0.0";// ini.ReadValue("Server", "Ip");
		int ServerPort = 1900; // ini.ReadInt("Server", "Port", 9988);1900
		// _ExchangeServer.setServerID("sa9002");
		_ExchangeServer.setEsm(this);

		serverInit.init_BeginBusiness();

		// 正式发布时候进行调用

		Iterator<IBusinessDomain> iter = DomainFactory.getDomains().iterator();
		while (iter.hasNext()) {
			IBusinessDomain IObj = iter.next();

			try {
				ServerSideDomain ServerDomain = new ServerSideDomain(IObj);

				ProxyUtil.getProxyFile(ServerDomain.GetDomainName());
				LogUtil.debug("增加Domain:" + ServerDomain.GetDomainName());

				AppServer.AddDomain(ServerDomain.GetDomainName(), ServerDomain);

				try {
					IObj.DomainEntry(this);
                    
					//判断是否为DomainLock接口实现类。
					if(IObj instanceof DomainLock) {
						LogUtil.BusinessInfo(IObj.GetDomainName() + " domainlock " );
						domainLockMap.put(IObj.GetDomainName(), (DomainLock)IObj);	
					}
					
					
				} catch (RuntimeException e) {
					AppServer.DisplayRunInfo(ServerDomain.GetDomainName()
							+ "DomainEntry exception ");
				}

				this.proxyList.loadProxy(ServerDomain.GetDomainName(), this);

			} catch (Exception e) {
				System.out.println("增加domain异常: " + e.getMessage());
			}
		}

		/*
		 * by zzw 测试用
		 */
/*		
	
		if (vx.getHp().get("Class") == null) {
		
		  LogUtil.warn("!==警告，xml文件中，未获得任何组件信息==!");
		  
		  } else {
		  
		  for (Map.Entry<String, HashMap<String, String>> me : vx.getHp()
		  .get("Class").entrySet()) { String sFileName =
		  me.getValue().get("ClassName"); String url =
		 me.getValue().get("Desc");
		  
		  AppServer.DisplayRunInfo("加载业务组件 " + sFileName + " 开始");
		  
		  // System.out.println(sFileName); // System.out.println(url);
		  
		  try { IBusinessDomain IObj = (IBusinessDomain) ml
		  .LoadBusinessComponent(sFileName, url);
		  
		  if (IObj == null) continue;
		  
		  ServerSideDomain ServerDomain = new ServerSideDomain(IObj); 
		  //开始生成文件名 。 // ProxyUtil.getProxyFile(ServerDomain.GetDomainName());
		  LogUtil.debug("代理文件开始生成，文件名:" + ServerDomain.GetDomainName());
		  // 在方法中生成各种代理的方法
		 // 在事件接口实现中 得到 各种事件声明
		  
		  AppServer.AddDomain(ServerDomain.GetDomainName(), ServerDomain);
		  
		  try { IObj.DomainEntry(this);
		  
		  } catch (RuntimeException e) {
		  AppServer.DisplayRunInfo("DomainEntry exception"); }
		  
		  AppServer.DisplayRunInfo("加载业务组件 " + sFileName + " 成功");
		  
		  } catch (RuntimeException e) {
		  AppServer.DisplayRunInfo("加载业务组件 " + sFileName + " 异常：" +
		   e.getMessage()); } } 
		  }
*/	  
		/**
		 * by zzw 实例化接口
		 * */

		
		/**
		 * 测试专用
		 * 
		 * */
/*
		Iterator<IBusinessDomain> iter = TestInit.getInstance().getDomains().iterator();
		while (iter.hasNext()) {
			IBusinessDomain IObj = iter.next();

			try {
				ServerSideDomain ServerDomain = new ServerSideDomain(IObj);

				ProxyUtil.getProxyFile(ServerDomain.GetDomainName());
				LogUtil.debug("增加Domain:" + ServerDomain.GetDomainName());

				AppServer.AddDomain(ServerDomain.GetDomainName(), ServerDomain);

				try {
					IObj.DomainEntry(this);
                    
					//判断是否为DomainLock接口实现类。
					if(IObj instanceof DomainLock) {
						LogUtil.BusinessInfo(IObj.GetDomainName() + " domainlock " );
						domainLockMap.put(IObj.GetDomainName(), (DomainLock)IObj);	
					}
					
					
				} catch (RuntimeException e) {
					AppServer.DisplayRunInfo(ServerDomain.GetDomainName()
							+ "DomainEntry exception ");
				}

				this.proxyList.loadProxy(ServerDomain.GetDomainName(), this);

			} catch (Exception e) {
				System.out.println("增加domain异常: " + e.getMessage());
			}
		}
*/		
		System.out.println(this.getServerId());
		
		serverInit.init_AfterBusiness();

		// 创建几个组
		if (vx.getHp().get("Group") == null) {

			LogUtil.warn("!==警告，xml文件中，未获得任何建组信息==!");
		} else {
			for (Map.Entry<String, HashMap<String, String>> s : vx.getHp()
					.get("Group").entrySet()) {
				System.out.println("===========" + s.getKey());
				CreateGroup(s.getKey());
			}
		}

		ProxyUtil.pringCfileAll();

		ServerPort = this.serverInit.getPort();

		if (ServerPort == 0) {
			ServerPort = 1900;
		}

		ServerIp = this.serverInit.getIP();
		if (ServerIp == null) {

			ServerIp = "0.0.0.0";
		}

		if (!_ExchangeServer.StartUp(ServerIp, ServerPort)) {
			AppServer.DisplayRunInfo("启动服务器失败 IP: " + ServerIp + " 端口："
					+ (new Integer(ServerPort)).toString());
		} else {
			AppServer.DisplayRunInfo("ExchangeServer 启动成功 IP: " + ServerIp
					+ " 端口：" + (new Integer(ServerPort)).toString());
		}

	}

	@Override
	public IChannel CreateLocalChannel(String TargetSessionid, String IP,
			int port) {
		return this._ExchangeServer.CreateLocalChannel(TargetSessionid, IP,
				port);

	}

	@Override
	public void LocalChannelSendMessage(IMessage message, String target,
			String source, String nosend) {
		// TODO Auto-generated method stub
		if (source == null)
			source = this._ExchangeServer.getServerID();
		this._ExchangeServer.GobalSendMessage(message, target, source, null,
				nosend);

	}

	@Override
	public void LocalUpSendMessage(IMessage message, String target,
			String source) {
		// TODO Auto-generated method stub
		if (source == null)
			source = this._ExchangeServer.getServerID();
		this._ExchangeServer.GobalUpSendMessage(message, target, source, null,
				null);

	}

	@Override
	public void LocalDownSendMessage(IMessage message, String target,
			String source) {
		// TODO Auto-generated method stub
		if (source == null)
			source = this._ExchangeServer.getServerID();
		this._ExchangeServer.GobalDownSendMessage(message, target, source,
				null, null);

	}

	/**
	 * 获取IP和端口号
	 * 
	 * @return
	 */
	public static String[][] getIpAndPort() {
		String path = "";
		if (System.getProperty("os.name").equals("Linux"))
			path = "/etc/fxconf/AppService/AppService.conf";
		else
			path = "D:\\fxconf\\AppService\\AppService.conf";
		org.jdom.Element root = getRootElement(path);
		org.jdom.Element servers = root.getChild("AppServer").getChild(
				"Servers");
		@SuppressWarnings("unchecked")
		List<org.jdom.Element> listserver = servers.getChildren("Server");
		String[][] str = new String[listserver.size()][2];
		for (int i = 0; i < listserver.size(); i++) {
			org.jdom.Element e = listserver.get(i);
			str[i][0] = e.getChildText("IP");
			str[i][1] = e.getChildText("PORT");
		}
		return str;
	}

	/**
	 * 获取XML文档的根节点
	 * 
	 * @param path
	 * @return
	 */
	public static org.jdom.Element getRootElement(String path) {
		org.jdom.Element rootElement = null;
		try {
			// SAXBuilder使用一个第三方的SAX解析器,可以从不同的输入源来构造JDOM文档对象
			SAXBuilder builder = new SAXBuilder();
			// 得到xml
			org.jdom.Document document = builder.build(new FileInputStream(
					new File(path)));
			// getRootElement()用于返回文档的根元素.
			rootElement = document.getRootElement();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rootElement;
	}

	private String target, source;
	private boolean continueFlag;

	@Override
	synchronized final public void setTarget(String target) {
		// TODO Auto-generated method stub
		this.target = target;
	}

	@Override
	synchronized final public void setSource(String source) {
		// TODO Auto-generated method stub
		this.source = source;
	}

	@Override
	synchronized final public String getSource() {
		// TODO Auto-generated method stub
		return this.source;
	}

	@Override
	synchronized final public String getTarget() {
		// TODO Auto-generated method stub
		return this.target;
	}

	@Override
	synchronized final public boolean getContinueFlag() {
		// TODO Auto-generated method stub
		return continueFlag;
	}

	@Override
	public void setContinueFlag(boolean b) {
		// TODO Auto-generated method stub
		continueFlag = b;
	}

	@Override
	public String getIP(String sessionid) {
		// TODO Auto-generated method stub
		String str = null;
		IChannel[] ic = _ExchangeServer.FindChannel(Encoding
				.AdsToPointProtocol(sessionid));
		if (ic != null && ic.length > 0) {
			str = ic[0].getRemoteIP();

		}

		return str;
	}

	@Override
	public boolean isActiveSession(String client) {
		// TODO Auto-generated method stub
		return GroupPoolTool.Instance().isActiveSession(client);
	}

}
// end ApplicationServer

