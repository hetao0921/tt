package NVMP.CommandDomain;

import org.misc.log.LogUtil;
import org.misc.RefObject;
import corenet.exchange.Encoding;

import NVMP.AppService.Remoting;
import NVMP.AppService.Interface.*;
import NVMP.Command.Business.*;
import NVMP.Command.*;

///////////////////////////////////////////////////////////
//  CommandObject.cs
//  Implementation of the Class CommandObject
//  Generated by Enterprise Architect
//  Created on:      30-����-2011 16:34:48
//  Original author: Administrator
///////////////////////////////////////////////////////////








public class CommandGroupBusiness 
{






	public void dispose()
	{

	}


	public ICommandEvent CommandEvent;   

	private SystemBusiness BusinessData;	

    private CommanderBusiness aCommanderBusiness;
	
	public CommandGroupBusiness(SystemBusiness sysData,CommanderBusiness cb)
	{
		BusinessData = sysData;
		aCommanderBusiness = cb;
	}
	
	//指挥员进入指挥分群
	@Remoting
	public final void EnterCommandGroup(String CommandGroupId, String CommanderId, Boolean IsEnter)
	{
		String say=String.format("****指挥员进入指挥状态：指挥分群编号=%s,指挥员编号=%s,是否上线=%s",CommandGroupId,CommanderId,IsEnter.toString());
		LogUtil.BusinessDebug(say);
		try
		{			
			Commander aCommander = null;
			RefObject<Commander> tempRef_aCommander = new RefObject<Commander>(aCommander);
			Boolean tempVar = BusinessData.GetCommanderById(CommanderId, tempRef_aCommander);
				aCommander = tempRef_aCommander.argvalue;
			if (tempVar)
			{
				aCommander.EnterCommandGroup(CommandGroupId, IsEnter);
				aCommanderBusiness.SendVersionError(aCommander.getDeviceID());
			}
			
			//通知所有指挥终端状态改变 Add
			(CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToGroupProtocol(CommandDomain.AllCommander));		
			CommandEvent.OnCommanderStateChange(CommanderId,CommandGroupId ,CommanderWorkStatus.Command.getValue());
		}catch(Exception e)
		{
			LogUtil.BusinessError("指挥员进入指挥状态错误：" + say);
			LogUtil.BusinessError(e);
			for(StackTraceElement s:e.getStackTrace()){
				LogUtil.BusinessError("===="+s.toString());
			}
		}


	}
	
	 //指挥员之间开始或停止双向视频通信（指挥员开始或停止指挥员音视频转发）
	   @Remoting
	   public final void OperateCommanderP2PCommunicate(String SendCommanderId, String DestCommanderId, Boolean IsStart)
	   {
			String say=String.format("****指挥员之间开始或停止双向视频通信：发送方指挥员编号=%s,接收方指挥员编号=%s,是否开始=%s",SendCommanderId,DestCommanderId,IsStart.toString());
			LogUtil.BusinessDebug(say);
			try
			{
				
				   (CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToPointProtocol(DestCommanderId));		
					CommandEvent.OnCommanderP2PCommunicate(SendCommanderId, IsStart);
				
			}catch(Exception e)
			{
				LogUtil.BusinessError("指挥员之间开始或停止双向视频通信错误：" + say);
				LogUtil.BusinessError(e);
			
		     }
		  
	   }

	 //指挥员开始或停止专向指挥
	@Remoting
	public final void OperateP2PVoice(String SendCommanderId, String DestCommanderId, Boolean IsStart)
	{
		String say=String.format("****指挥员开始或停止专向指挥：发送方指挥员编号=%s,接收方指挥员编号=%s,是否开始=%s",SendCommanderId,DestCommanderId,IsStart.toString());
		LogUtil.BusinessDebug(say);
		try
		{
			BusinessData.OperateP2PVoice(SendCommanderId, DestCommanderId, IsStart);
			(CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToGroupProtocol(CommandDomain.AllCommander));		
			CommandEvent.OnP2PVoice(SendCommanderId, DestCommanderId,IsStart);
			
		}catch(Exception e)
		{
			LogUtil.BusinessError("指挥员开始或停止专向指挥错误：" + say);
			LogUtil.BusinessError(e);
		
	     }	


	}


	
	//指挥员请求协同指挥
	 @Remoting
	 public final void RequestCooperate(String SendCommanderId, String DestCommanderId)
	 {
		 String say=String.format("****收到挥协同协同指令：发送方指挥员编号=%s,接收方指挥员编号=%s",SendCommanderId,DestCommanderId);
			LogUtil.BusinessDebug(say); 
		 (CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToPointProtocol(DestCommanderId));		
			CommandEvent.OnRequestCooperate(SendCommanderId, DestCommanderId);
	 }
	 
	//指挥员回复协同指挥
	 @Remoting
	 public final void ResponeCooperate(String SendCommanderId, String DestCommanderId,Boolean IsAgree)
	 {
		 String say=String.format("****回复挥协同协同指令：发送方指挥员编号=%s,接收方指挥员编号=%s",SendCommanderId,DestCommanderId);
			LogUtil.BusinessDebug(say); 
		 (CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToPointProtocol(DestCommanderId));		
			CommandEvent.OnResponeCooperate(SendCommanderId, DestCommanderId,IsAgree);
	 }
	 
	//指挥员发送指挥呼叫
	 @Remoting
	 public final void OperateCommandCall(String SendCommanderId, String DestCommanderId)
	{
		 String say=String.format("****收到指挥呼叫指令：发送方指挥员编号=%s,接收方指挥员编号=%s",SendCommanderId,DestCommanderId);
			LogUtil.BusinessDebug(say); 
		 (CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToPointProtocol(DestCommanderId));		
		  CommandEvent.OnCommandCall(SendCommanderId, DestCommanderId);
		 
	}
	 
	//指挥员发送上分割
	 @Remoting
	 public final void OperateUpCut(String SendCommanderId, String GroupId, Boolean IsStart)
	{
		    String say=String.format("****指挥员开始或停止上分割：发送方指挥员编号=%s  指挥组编号=%s,是否开始=%s",SendCommanderId,GroupId,IsStart.toString());
			LogUtil.BusinessDebug(say);
							
			(CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToGroupProtocol(CommandDomain.AllCommander));		
			CommandEvent.OnOperateUpCut(SendCommanderId, GroupId, IsStart)	;			
		 
	}
			
	//指挥员发送下分割
	 @Remoting
	 public final void OperateDownCut(String SendCommanderId, String GroupId, Boolean IsStart)
	{
		    String say=String.format("****指挥员开始或停止下分割：发送方指挥员编号=%s  指挥组编号=%s,是否开始=%s",SendCommanderId,GroupId,IsStart.toString());
			LogUtil.BusinessDebug(say);
					
			(CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToGroupProtocol(CommandDomain.AllCommander));		
			CommandEvent.OnOperateDownCut(SendCommanderId, GroupId, IsStart);	
					
			 
		}
 
	//指挥员开始或停止监控视频转发
	 @Remoting
	  public final void OperateVideoeAssign(String DevicerId, Integer Index, String DestCommander, Boolean IsStart)
      {
		 (CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToPointProtocol(DestCommander));		
		  CommandEvent.OnVideoeAssign(DevicerId, Index, DestCommander, IsStart);		  
	  }
	 
	 
	 
	 //指挥员开始或停止越级指挥
	   @Remoting
	   public final void OperateBroadcast(String SendCommanderId,String CommandGroupId,Boolean IsStart)
	   {
			String say=String.format("****指挥员开始或停止越级指挥：指挥员编号=%s,分组编号=%s,是否开始=%s",SendCommanderId,CommandGroupId,IsStart.toString());
			LogUtil.BusinessDebug(say);
			try
			{
				
			   (CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToGroupProtocol(CommandDomain.AllCommander));	
			    CommandEvent.OnBroadcast(SendCommanderId,CommandGroupId, IsStart); 
//			  for(Commander item : BusinessData.getCommanderList())
//			  {
//				    if (!item.getCommanderId().equals(SendCommanderId) && item.getCollectionId().equals(CommandGroupId) )
//				    {
//					  (CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToPointProtocol(item.getCommanderId()));		
//					   CommandEvent.OnBroadcast(SendCommanderId,CommandGroupId, IsStart); 
//				   }
//			  }
//		  
				
			}catch(Exception e)
			{
				LogUtil.BusinessError("指挥员开始或停止越级指挥错误：" + say);
				LogUtil.BusinessError(e);
			
		     }
		  
		   		 
	   }
	   

	   
		//指挥员开始或停止指挥接替
	   @Remoting
	   public final void OperateCommandReplacemente(String DownCommanderId,String UpCommanderId, Boolean IsStart)
	   {
		   if (IsStart)
		   {
			   BusinessData.AddAccredit(UpCommanderId, DownCommanderId, "2");
		   }
		   else
		   {
			   BusinessData.DelAccredit(UpCommanderId, DownCommanderId);
		   }
		   (CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToGroupProtocol(CommandDomain.AllCommander));		
		   CommandEvent.OnCommandReplacemente(DownCommanderId, UpCommanderId, IsStart,true);
	   }
	   
	   //指挥员开始或停止指挥授权
	   @Remoting
	   public final void OperateCommandAccredit(String UpCommanderId,String DownCommanderId,Boolean IsStart)
		{
		   if (IsStart)
		   {
			   BusinessData.AddAccredit(UpCommanderId, DownCommanderId, "1");
		   }
		   else
		   {
			   BusinessData.DelAccredit(UpCommanderId, DownCommanderId);
		   }
		   
		   (CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToGroupProtocol(CommandDomain.AllCommander));		
		    CommandEvent.OnCommandReplacemente(DownCommanderId, UpCommanderId, IsStart,false);
		}
	   
	  
	   
	   public final void StopAccredit(String CommanderId)
	   {
		   for ( int i = BusinessData.getAccreditList().size() -1 ; i >= 0;i--)
			{
				 Accredit item = BusinessData.getAccreditList().get(i);
				if (item.Acception.toString() == CommanderId.toString()  || 
				   (item.Licensor.toString() == CommanderId.toString()))
				{
					(CommandDomain.AppRunTime()).SetCurChannel(Encoding.AdsToGroupProtocol(CommandDomain.AllCommander));	
					CommandEvent.OnCommandReplacemente(item.Acception, item.Licensor, false ,false);
					BusinessData.DelAccredit(CommanderId);
				}
			}	  


	     
	   }
	   
	
//	   //指挥员开始或停止分组指挥
//	   @Remoting
//	   public final void OperateGroupCommunicate(String CommanderId, Boolean IsStart)
//	   {
//	   }
	  
} 
